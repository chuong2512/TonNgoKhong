name: Tag Release

on:
  workflow_call:
    inputs:
      build-host:
        required: true
        type: string    
      version:
        required: true
        type: string

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  packageRelease:
    name: Package UPM Project and tag
    runs-on: ${{ inputs.build-host }}
    outputs:
      packageversion: ${{ steps.getpackageversion.outputs.packageversion }}    
    steps:
      - name: Script Version
        run: |
          echo "::group::Script Versioning"
          $scriptVersion = "1.0.2"
          echo "Build Script Version: $scriptVersion"
          echo "::endgroup::"
        shell: pwsh   
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          clean: true
          token: ${{ secrets.GIT_PAT }}
      - uses: actions/setup-node@v3
      - name: Set Github vars
        run: |
          if([string]::IsNullOrEmpty('${{ secrets.GIT_USER_NAME }}')){
            if([string]::IsNullOrEmpty('${{ secrets.GIT_USER_NAME }}')){
              $gitUser = "action"
              $gitEmail = "action@github.com"
            }
            else {
              $gitUser = "${GITHUB_ACTOR}"
              $gitEmail = "$gitUser@users.noreply.github.com"
            }
          }
          else {
            $gitUser = "${{ secrets.GIT_USER_NAME }}"
            $gitEmail = "$gitUser@users.noreply.github.com"
          }
          git config --global user.email "$gitUser@users.noreply.github.com"
          git config --global user.name "$gitUser"
        shell: pwsh     
      - name: Check if Tag Exists
        run: |
          $tagVersion = "${{ inputs.version }}"
          $tags = git tag
          echo "Tags found are [$tags], searching for [$tagVersion]"
          foreach ($tag in $tags)
          {
              if($tag.Trim() -eq "$tagVersion")
              {
                Write-Error "$tagVersion tag already exists"
                exit 1
              }
          }
        shell: pwsh
      - name: Create tag and push
        run: |
          $tagVersion = "${{ inputs.version }}"
          git tag -fa "v$tagVersion" "${GITHUB_SHA}" -m "v$tagVersion Release [skip ci]"
          git push origin "v$tagVersion" --force       
        shell: pwsh